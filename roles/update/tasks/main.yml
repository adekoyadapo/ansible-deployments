# tasks file for update
---
- name: Update apt-get repo and cache
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  when: ansible_distribution == 'Ubuntu'

- name: Upgrade all apt packages
  apt: upgrade=dist force_apt_get=yes
  when: ansible_distribution == 'Ubuntu'
  async: 1000
  poll: 0
  register: update_sleeper

- name: install epel-release
  yum:
    name: epel-release
    state: latest
  when: ansible_distribution == 'CentOS'

- name: update the system
  yum:
    name: "*"
    state: latest
  async: 1000
  poll: 0
  register: yum_sleeper
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora'

- name: Put SELinux in permissive mode, logging actions that would be blocked.
  selinux:
    policy: targeted
    state: permissive
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora'

- name: 'Update - check on Ubuntu update task'
  async_status:
    jid: "{{ update_sleeper.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 200
  when: ansible_distribution == 'Ubuntu'

- name: 'Update - check on {{ ansible_distribution }} update task'
  async_status:
    jid: "{{ yum_sleeper.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 200
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora'
  ignore_errors: true

- name: Check if a reboot is needed for Debian and Ubuntu boxes
  register: reboot_required_file
  stat: path=/var/run/reboot-required get_md5=no
  when: ansible_distribution == 'Ubuntu'
  tags:
  - check-reboot

- name: Reboot the Debian or Ubuntu server
  reboot:
    msg: "Reboot initiated by Ansible due to kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: ansible_distribution == 'Ubuntu' and reboot_required_file.stat.exists
  tags:
  - check-reboot

- name: check if reboot is required for CentOS
  shell: needs-restarting -r
  failed_when: false
  register: reboot_required
  changed_when: false
  when: ansible_distribution == 'CentOS'
  tags:
  - check-reboot

- name: check if reboot is required for Fedora
  shell: dnf needs-restarting -r
  failed_when: false
  register: reboot_required_fedora
  changed_when: false
  when: ansible_distribution == 'Fedora'
  tags:
  - check-reboot


- name: Reboot the CentOS server
  reboot:
    msg: "Reboot initiated by Ansible due to kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: ansible_distribution == 'CentOS' and reboot_required.rc != 0
  tags:
  - check-reboot

- name: Reboot the Fedora server
  reboot:
    msg: "Reboot initiated by Ansible due to kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: ansible_distribution == 'Fedora' and reboot_required_fedora.rc != 0
  tags:
  - check-reboot

- name: Install cockpit and other tools
  yum: name={{ item }} state=present
  loop: [ 'rsyslog', 'cockpit', 'wget', 'cockpit-docker', 'nano', 'curl']
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora' and 'podman-install' is defined|bool
  tags:
  - cockpit
  - install

- name: Enable service cockpit
  systemd: name={{ item }} enabled=yes state=started
  loop: [ 'cockpit.socket', 'cockpit', 'rsyslog' ]
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora' and 'podman-install' is defined|bool
  tags:
  - cockpit

- name: Allow cockpit and other tools
  firewalld: service={{ item }} state=enabled permanent=yes
  loop: [ 'cockpit' ]
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora' and 'podman-install' is defined|bool
  tags:
  - cockpit

- name: Docker install Ubuntu
  shell: curl -sSL https://get.docker.com | sh
  when: ansible_distribution == 'Ubuntu' and 'docker-install' is defined
  tags:
  - docker

- name: Setup Docker-compose
  apt: name={{ item }} update_cache=yes state=latest
  loop: [ 'libffi-dev', 'libssl-dev', 'rsyslog', 'cockpit', 'wget', 'python3', 'python3-pip']
  when: ansible_distribution == 'Ubuntu' and 'docker-install' is defined
  tags:
  - docker

- name: Install python package
  pip: name={{item}} state=present
  loop: ['docker-compose']
  when: ansible_distribution == 'Ubuntu' and 'docker-install' is defined
  tags:
  - docker
